version: '3'

services:
  mysql:
    image: mysql:latest
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - alchive-db:/alchive-db/mysql
    restart: always
    networks:
      - alchive

  springboot:
    image: springboot
    container_name: springboot
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mysql
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    networks:
      - alchive

#  # Monitoring
#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:latest
#    volumes:
#      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    ports:
#      - "9090:9090"
#    networks:
#      - alchive
#
#  grafana:
#    container_name: grafana
#    image: grafana/grafana:latest
#    volumes:
#      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
#      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
#      - ./monitoring/grafana/provisioning/dashboards:/var/lib/grafana/dashboards
#    ports:
#      - "3000:3000"
#    depends_on:
#      - prometheus
#    networks:
#      - alchive
#
#  cadvisor:
#    container_name: cadvisor
#    image: gcr.io/cadvisor/cadvisor:latest
#    ports:
#      - "8081:8081"
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:ro
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    privileged: true
#    networks:
#      - alchive

networks:
  alchive:
    driver: bridge

volumes:
  alchive-db:
